public List<User> GetUsers()
{
    List<User> users = new List<User>();
    try
    {
        users = Context.Users.ToList();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        users = null;
    }
    return users;
}

public User GetUserById(int userId)
{
    User user = null;
    try
    {
        user = Context.Users.Find(userId);
    }
    catch (Exception ex)
    {
        user = null;
    }
    return user;
}

public bool AddUser(User user)
{
    bool status = false;
    try
    {
        Context.Users.Add(user);
        Context.SaveChanges();
        status = true;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        status = false;
    }
    return status;
}

public bool UpdateUser(User user)
{
    bool status = false;
    try
    {
        var existing = Context.Users.Find(user.UserId);
        if (existing != null)
        {
            existing.FirstName = user.FirstName;
            existing.LastName = user.LastName;
            existing.Email = user.Email;
            existing.Password = user.Password;
            existing.Role = user.Role;
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

public bool DeleteUser(int userId)
{
    bool status = false;
    try
    {
        var user = Context.Users.Find(userId);
        if (user != null)
        {
            Context.Users.Remove(user);
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

//Room Table
public List<Room> GetRooms()
{
    List<Room> rooms = new List<Room>();
    try
    {
        rooms = Context.Rooms.ToList();
    }
    catch (Exception ex)
    {
        rooms = null;
    }
    return rooms;
}

public Room GetRoomById(int roomId)
{
    Room room = null;
    try
    {
        room = Context.Rooms.Find(roomId);
    }
    catch (Exception ex)
    {
        room = null;
    }
    return room;
}

public bool AddRoom(Room room)
{
    bool status = false;
    try
    {
        Context.Rooms.Add(room);
        Context.SaveChanges();
        status = true;
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error while adding room: " + ex.Message);
        if (ex.InnerException != null)
        {
            Console.WriteLine("Inner Exception: " + ex.InnerException.Message);
        }
        status = false;
    }
    return status;
}

public bool UpdateRoom(Room room)
{
    bool status = false;
    try
    {
        var existing = Context.Rooms.Find(room.RoomId);
        if (existing != null)
        {
            existing.RoomNumber = room.RoomNumber;
            existing.RoomType = room.RoomType;
            existing.PricePerNight = room.PricePerNight;
            existing.Capacity = room.Capacity;
            existing.IsAvailable = room.IsAvailable;
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

public bool DeleteRoom(int roomId)
{
    bool status = false;
    try
    {
        var room = Context.Rooms.Find(roomId);
        if (room != null)
        {
            Context.Rooms.Remove(room);
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

//Booking Table
public List<Booking> GetBookings()
{
    List<Booking> bookings = new List<Booking>();
    try
    {
        bookings = Context.Bookings.ToList();
    }
    catch (Exception ex)
    {
        bookings = null;
    }
    return bookings;
}

public Booking GetBookingById(int bookingId)
{
    Booking booking = null;
    try
    {
        booking = Context.Bookings.Find(bookingId);
    }
    catch (Exception ex)
    {
        booking = null;
    }
    return booking;
}

public bool AddBooking(Booking booking)
{
    bool status = false;
    try
    {
        Context.Bookings.Add(booking);
        Context.SaveChanges();
        status = true;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        if (ex.InnerException != null)
        {
            Console.WriteLine(ex.InnerException.Message);
        }
        status = false;
    }
    return status;
}

public bool UpdateBookingStatus(int bookingId, string bookingStatus)
{
    bool status = false;
    try
    {
        var booking = Context.Bookings.Find(bookingId);
        if (booking != null)
        {
            booking.BookingStatus = bookingStatus;
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

public bool DeleteBooking(int bookingId)
{
    bool status = false;
    try
    {
        var booking = Context.Bookings.Find(bookingId);
        if (booking != null)
        {
            Context.Bookings.Remove(booking);
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

//Payment Table
public List<Payment> GetPayments()
{
    List<Payment> payments = new List<Payment>();
    try
    {
        payments = Context.Payments.ToList();
    }
    catch (Exception ex)
    {
        payments = null;
    }
    return payments;
}

public Payment GetPaymentById(int paymentId)
{
    Payment payment = null;
    try
    {
        payment = Context.Payments.Find(paymentId);
    }
    catch (Exception ex)
    {
        payment = null;
    }
    return payment;
}

public bool AddPayment(Payment payment)
{
    bool status = false;
    try
    {
        Context.Payments.Add(payment);
        Context.SaveChanges();
        status = true;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        if (ex.InnerException != null)
        {
            Console.WriteLine(ex.InnerException.Message);
        }
        status = false;
    }
    return status;
}

public bool UpdatePaymentStatus(int paymentId, string paymentStatus)
{
    bool status = false;
    try
    {
        var payment = Context.Payments.Find(paymentId);
        if (payment != null)
        {
            payment.PaymentStatus = paymentStatus;
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}

public bool DeletePayment(int paymentId)
{
    bool status = false;
    try
    {
        var payment = Context.Payments.Find(paymentId);
        if (payment != null)
        {
            Context.Payments.Remove(payment);
            Context.SaveChanges();
            status = true;
        }
    }
    catch (Exception ex)
    {
        status = false;
    }
    return status;
}